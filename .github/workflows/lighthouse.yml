name: Lighthouse

on: [push]

env:
  CI: true
  TZ: UTC
  E2E_TEST: 1
  NODE_ENV: ci
  WEBSITE_URL: http://localhost:3000
  API_URL: http://localhost:3060
  API_KEY: dvl-1510egmf4a23d80342403fb599qd
  API_FOLDER: /home/runner/work/opencollective-frontend/opencollective-frontend/opencollective-api
  FRONTEND_FOLDER: /home/runner/work/opencollective-frontend/opencollective-frontend
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

jobs:
  check:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server
      postgres:
        image: mdillon/postgis:9.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install postgresql-client
        run: sudo apt -y install postgresql-client

      - name: Checkout (frontend)
        uses: actions/checkout@v2-beta

      - name: Checkout (api)
        run: ./scripts/ci_checkout_api.sh

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Restore node_modules (api)
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: opencollective-api/node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('opencollective-api/package-lock.json') }}

      - name: Restore .npm cache (api)
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('opencollective-api/package-lock.json') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('opencollective-api/package-lock.json') }}
            - ${{ runner.os }}-api-npm-cache-

      - name: Install dependencies (api)
        working-directory: opencollective-api
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Build (api)
        working-directory: opencollective-api
        run: npm run build

      - name: Restore node_modules (frontend)
        uses: actions/cache@v1
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Restore .npm cache (frontend)
        if: steps.node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies (frontend)
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: CYPRESS_INSTALL_BINARY=0 npm ci --prefer-offline --no-audit

      - name: Restore .next cache (frontend)
        uses: actions/cache@v1
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-next-cache-${{ github.sha }}
            ${{ runner.os }}-next-cache-

      - name: Restore build (frontend)
        uses: actions/cache@v1
        id: next-build
        with:
          path: dist
          key: ${{ runner.os }}-next-build-${{ github.sha }}

      - name: Build (frontend)
        if: steps.next-build.outputs.cache-hit != 'true'
        run: npm run build

      - name: Setup DB
        run: ./scripts/setup_db.sh

      - name: Run Lighthouse
        run: ./scripts/lighthouse.sh
